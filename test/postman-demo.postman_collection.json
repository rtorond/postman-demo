{
	"info": {
		"_postman_id": "b81685e3-c1a3-4822-84d7-a7deaf9d35b8",
		"name": "postman-demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Should not be able to create cart with unavailable product",
			"item": [
				{
					"name": "1 - Get products availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bad6d7a1-2577-4392-87b3-ef9169dbf92b",
								"exec": [
									"pm.test(\"Should return products\", () => {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    const products = pm.response.json();",
									"    ",
									"    pm.expect(products).to.be.an('array').to.not.have.lengthOf(0);",
									"    ",
									"    pm.collectionVariables.set(\"productId\", products[0].id);",
									"    pm.collectionVariables.set(\"productStock\", products[0].stock);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{products-service-url}}/products",
							"host": [
								"{{products-service-url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Create cart with unavailable products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f595de4-e267-4364-8e0d-5a3d583f5fbf",
								"exec": [
									"pm.collectionVariables.set(",
									"    \"productQuantity\", ",
									"    pm.collectionVariables.get(\"productStock\") + 2",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f84bb2eb-7046-49e5-ada3-65170a8d67c2",
								"exec": [
									"pm.test(\"Should not be able to create cart with quantity highter than stock\", () => {",
									"    pm.response.to.have.status(500);",
									"    ",
									"    let expectMessage = \"Error: Products not available in requested quantity\";",
									"    expectMessage += \" [\"+pm.collectionVariables.get(\"productId\")+\"]\";",
									"    ",
									"    pm.expect(pm.response.text()).to.equal(expectMessage);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"user\": \"JM\",\n\t\"products\": [{\n\t\t\"id\": \"{{productId}}\",\n\t\t\"quantity\": {{productQuantity}}\n\t}]\n}"
						},
						"url": {
							"raw": "{{carts-service-url}}/carts",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a7e3f6ad-00e0-4d67-96ef-da3ee0bc3cbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9ae7711b-87af-440f-9961-75393ee32914",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Should create cart with available product",
			"item": [
				{
					"name": "1 - Get products availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bad6d7a1-2577-4392-87b3-ef9169dbf92b",
								"exec": [
									"pm.test(\"Should return products\", () => {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    const products = pm.response.json();",
									"    ",
									"    pm.expect(products).to.be.an('array').to.not.have.lengthOf(0);",
									"    ",
									"    pm.collectionVariables.set(\"productId\", products[0].id);",
									"    pm.collectionVariables.set(\"productStock\", products[0].stock);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{products-service-url}}/products",
							"host": [
								"{{products-service-url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Create cart with available products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f595de4-e267-4364-8e0d-5a3d583f5fbf",
								"exec": [
									"pm.collectionVariables.set(",
									"    \"productQuantity\", ",
									"    pm.collectionVariables.get(\"productStock\")",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f84bb2eb-7046-49e5-ada3-65170a8d67c2",
								"exec": [
									"pm.test(\"Should not be able to create cart with quantity highter than stock\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"user\": \"JM\",\n\t\"products\": [{\n\t\t\"id\": \"{{productId}}\",\n\t\t\"quantity\": {{productQuantity}}\n\t}]\n}"
						},
						"url": {
							"raw": "{{carts-service-url}}/carts",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "___clean_carts",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{carts-service-url}}/_reset",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"_reset"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a7e3f6ad-00e0-4d67-96ef-da3ee0bc3cbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9ae7711b-87af-440f-9961-75393ee32914",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Should update user cart",
			"item": [
				{
					"name": "1 - Get products availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bad6d7a1-2577-4392-87b3-ef9169dbf92b",
								"exec": [
									"pm.test(\"Should return products\", () => {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    const products = pm.response.json();",
									"    ",
									"    pm.expect(products).to.be.an('array').to.not.have.lengthOf(0);",
									"    ",
									"    pm.collectionVariables.set(\"productId\", products[0].id);",
									"    pm.collectionVariables.set(\"productStock\", products[0].stock);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{products-service-url}}/products",
							"host": [
								"{{products-service-url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Create cart with available products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f595de4-e267-4364-8e0d-5a3d583f5fbf",
								"exec": [
									"pm.collectionVariables.set(",
									"    \"productQuantity\", ",
									"    pm.collectionVariables.get(\"productStock\")",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f84bb2eb-7046-49e5-ada3-65170a8d67c2",
								"exec": [
									"pm.test(\"Should be able to create cart with quantity = stock\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"user\": \"JM\",\n\t\"products\": [{\n\t\t\"id\": \"{{productId}}\",\n\t\t\"quantity\": {{productQuantity}}\n\t}]\n}"
						},
						"url": {
							"raw": "{{carts-service-url}}/carts",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Create other cart with available products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f595de4-e267-4364-8e0d-5a3d583f5fbf",
								"exec": [
									"pm.collectionVariables.set(",
									"    \"productQuantity\", ",
									"    pm.collectionVariables.get(\"productStock\") - 1",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f84bb2eb-7046-49e5-ada3-65170a8d67c2",
								"exec": [
									"pm.test(\"Should be able to update cart with quantity < stock\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"user\": \"JM\",\n\t\"products\": [{\n\t\t\"id\": \"{{productId}}\",\n\t\t\"quantity\": {{productQuantity}}\n\t}]\n}"
						},
						"url": {
							"raw": "{{carts-service-url}}/carts",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Find only one cart for user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f595de4-e267-4364-8e0d-5a3d583f5fbf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f84bb2eb-7046-49e5-ada3-65170a8d67c2",
								"exec": [
									"pm.test(\"Should find only one cart for user\", () => {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    const cart = pm.response.json();",
									"    pm.expect(cart.products[0].quantity).to.equal(",
									"        pm.collectionVariables.get(\"productQuantity\")",
									"    );",
									"});",
									"",
									"pm.test(\"Should have price for cart products\", () => {",
									"    const cart = pm.response.json();",
									"    pm.expect(cart.products[0].price).to.be.an(\"number\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{carts-service-url}}/user_cart/{{userId}}",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"user_cart",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "___clean_carts",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{carts-service-url}}/_reset",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"_reset"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a7e3f6ad-00e0-4d67-96ef-da3ee0bc3cbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9ae7711b-87af-440f-9961-75393ee32914",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Should create order from user cart",
			"item": [
				{
					"name": "1 - Get products availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bad6d7a1-2577-4392-87b3-ef9169dbf92b",
								"exec": [
									"pm.test(\"Should return products\", () => {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    const products = pm.response.json();",
									"    ",
									"    pm.expect(products).to.be.an('array').to.not.have.lengthOf(0);",
									"    ",
									"    pm.collectionVariables.set(\"productId\", products[0].id);",
									"    pm.collectionVariables.set(\"productStock\", products[0].stock);",
									"    pm.collectionVariables.set(\"productPrice\", products[0].price);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{products-service-url}}/products",
							"host": [
								"{{products-service-url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Create cart with available products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f595de4-e267-4364-8e0d-5a3d583f5fbf",
								"exec": [
									"pm.collectionVariables.set(",
									"    \"productQuantity\", ",
									"    pm.collectionVariables.get(\"productStock\")",
									");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f84bb2eb-7046-49e5-ada3-65170a8d67c2",
								"exec": [
									"pm.test(\"Should be able to create cart with quantity = stock\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"user\": \"JM\",\n\t\"products\": [{\n\t\t\"id\": \"{{productId}}\",\n\t\t\"quantity\": {{productQuantity}}\n\t}]\n}"
						},
						"url": {
							"raw": "{{carts-service-url}}/carts",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Create order from user cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d833221-66f1-442a-8408-a3229ccbcf2d",
								"exec": [
									"pm.test(\"Should create order\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have correct amout\", () => {",
									"   const order = pm.response.json();",
									"   const quantity = pm.collectionVariables.get(\"productQuantity\");",
									"   const price = pm.collectionVariables.get(\"productPrice\");",
									"   pm.expect(order.totalAmount).to.be.equal(quantity*price);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"{{userId}}\"\n}"
						},
						"url": {
							"raw": "{{orders-service-url}}/orders",
							"host": [
								"{{orders-service-url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "___clean_carts",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{carts-service-url}}/_reset",
							"host": [
								"{{carts-service-url}}"
							],
							"path": [
								"_reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "___clean_orders",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{orders-service-url}}/_reset",
							"host": [
								"{{orders-service-url}}"
							],
							"path": [
								"_reset"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b56050f3-698a-4d44-b5eb-8a4855c31672",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ddb0aabf-6e7c-46d1-9db2-8e0803235032",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "abbf2692-bc5c-4541-9bc7-0354e9e07385",
			"key": "productId",
			"value": "b0e22751-3a31-4cbb-b00c-af18e8577347",
			"type": "string"
		},
		{
			"id": "bffb0988-66b1-45a4-8567-fdb02d9f2519",
			"key": "productStock",
			"value": 5,
			"type": "number"
		},
		{
			"id": "4cf58dee-534a-4922-a3d9-ffbde5aec0b0",
			"key": "productQuantity",
			"value": 5,
			"type": "number"
		},
		{
			"id": "8ee5261a-3a6a-4bad-a418-f6cbf54e8eed",
			"key": "productPrice",
			"value": 2.5,
			"type": "number"
		},
		{
			"id": "14a0213b-311d-431d-bff2-9306562ca18b",
			"key": "userId",
			"value": "JM",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}